/**
 * Flowtype definitions for CallParams
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.10.0
 */

import BigNumber from "bignumber.js";

declare var ArgumentType: {|
  +uint8: 0, // 0
  +int8: 1, // 1
  +uint16: 2, // 2
  +int16: 3, // 3
  +uint32: 4, // 4
  +int32: 5, // 5
  +uint64: 6, // 6
  +int64: 7, // 7
  +uint256: 8, // 8
  +string: 9, // 9
  +bool: 10, // 10
  +bytes: 11, // 11
  +bytesfix: 12, // 12
  +address: 13, // 13
  +func: 14 // 14
|};
declare interface SolidityType {
  ty: $Values<typeof ArgumentType>;
  array: boolean;
}
declare export class FunctionSelector {
  argumentTypes: SolidityType[];
  argumentList: Argument[];
  constructor(func?: string): this;
  setFunction(func: string): this;
  addParamType(ty: string | SolidityType, length?: number): this;
  static identifier(func: string): Uint8Array;

  /**
   * NOT A STABLE API
   */
  _toProto(): Uint8Array;
  toString(): string;
}
declare export class CallParams {
  constructor(func?: string | FunctionSelector): this;
  setFunction(func: string): this;
  addUint(param: number | BigNumber, bitwidth: number): this;
  addInt(param: number | BigNumber, bitwidth: number): this;
  addUintArray(param: number[] | BigNumber[], bitwidth: number): this;
  addIntArray(param: number[] | BigNumber[], bitwidth: number): this;
  addBoolean(param: boolean): this;
  addString(param: string): this;
  addAddress(param: Uint8Array | string): this;
  addBytes(param: Uint8Array, length?: number): this;
  addFunction(
    address: Uint8Array | string,
    func: FunctionSelector | string
  ): this;
  addStringArray(strArray: string[]): this;
  addByteArray(byteArray: Uint8Array[]): this;
  addAddressArray(addresses: string[] | Uint8Array[]): this;

  /**
   * NOT A STABLE API
   */
  _toProto(): Uint8Array;
}
declare interface Argument {
  dynamic: boolean;
  value: Uint8Array;
}
declare export {};
