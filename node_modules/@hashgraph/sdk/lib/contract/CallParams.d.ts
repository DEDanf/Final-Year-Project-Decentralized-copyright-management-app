import BigNumber from "bignumber.js";
declare enum ArgumentType {
    uint8 = 0,
    int8 = 1,
    uint16 = 2,
    int16 = 3,
    uint32 = 4,
    int32 = 5,
    uint64 = 6,
    int64 = 7,
    uint256 = 8,
    string = 9,
    bool = 10,
    bytes = 11,
    bytesfix = 12,
    address = 13,
    func = 14
}
interface SolidityType {
    ty: ArgumentType;
    array: boolean;
}
export declare class FunctionSelector {
    private _func?;
    private _needsComma;
    argumentTypes: SolidityType[];
    argumentList: Argument[];
    constructor(func?: string);
    setFunction(func: string): this;
    addParamType(ty: string | SolidityType, length?: number): this;
    static identifier(func: string): Uint8Array;
    /**
     * NOT A STABLE API
     */
    _toProto(): Uint8Array;
    toString(): string;
}
export declare class CallParams {
    private readonly _func;
    private _currentArgument;
    constructor(func?: string | FunctionSelector);
    setFunction(func: string): this;
    private _conditionallyAddType;
    private static _validateBitWidth;
    addUint(param: number | BigNumber, bitwidth: number): this;
    addInt(param: number | BigNumber, bitwidth: number): this;
    addUintArray(param: number[] | BigNumber[], bitwidth: number): this;
    addIntArray(param: number[] | BigNumber[], bitwidth: number): this;
    addBoolean(param: boolean): this;
    addString(param: string): this;
    addAddress(param: Uint8Array | string): this;
    addBytes(param: Uint8Array, length?: number): this;
    addFunction(address: Uint8Array | string, func: FunctionSelector | string): this;
    addStringArray(strArray: string[]): this;
    addByteArray(byteArray: Uint8Array[]): this;
    addAddressArray(addresses: string[] | Uint8Array[]): this;
    private _addParam;
    /**
     * NOT A STABLE API
     */
    _toProto(): Uint8Array;
}
interface Argument {
    dynamic: boolean;
    value: Uint8Array;
}
export {};
