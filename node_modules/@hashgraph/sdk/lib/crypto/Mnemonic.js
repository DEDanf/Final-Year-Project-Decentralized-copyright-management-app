"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const bip39 = require("bip39");
const Ed25519PrivateKey_1 = require("./Ed25519PrivateKey");
/** result of `generateMnemonic()` */
class Mnemonic {
    /** Lazily generate the key, providing an optional passphrase to protect it with */
    constructor(words) {
        this.words = words;
    }
    toPrivateKey(passphrase) {
        return Ed25519PrivateKey_1.Ed25519PrivateKey.fromMnemonic(this, passphrase);
    }
    /**
     * Generate a random 24-word mnemonic.
     *
     * If you are happy with the mnemonic produced you can call `.generateKey()` on the returned object.
     *
     * This mnemonics that are compatible with the Android and iOS mobile wallets.
     *
     * **NOTE:** Mnemonics must be saved separately as they cannot be later recovered from a given key.
     */
    static generate() {
        // 256-bit entropy gives us 24 words
        return new Mnemonic(bip39.generateMnemonic(256).split(" "));
    }
    static fromString(mnemonic) {
        return new Mnemonic(mnemonic.split(" "));
    }
    toString() {
        return this.words.join(" ");
    }
}
exports.Mnemonic = Mnemonic;
