"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const ResponseCode_pb_1 = require("./generated/ResponseCode_pb");
const bignumber_js_1 = require("bignumber.js");
const Hbar_1 = require("./Hbar");
var ResponseCode_pb_2 = require("./generated/ResponseCode_pb");
exports.ResponseCodeEnum = ResponseCode_pb_2.ResponseCodeEnum;
const responseCodeNames = Object.entries(ResponseCode_pb_1.ResponseCodeEnum)
    .reduce((map, [name, code]) => (Object.assign(Object.assign({}, map), { [code]: name })), {});
/** Get the name of a response code from its number code. */
/* eslint-disable-next-line max-len */
exports.getResponseCodeName = (code) => responseCodeNames[code];
/**
 * Class of errors for response codes returned from Hedera.
 */
class HederaError extends Error {
    constructor(code) {
        const responseCodeName = exports.getResponseCodeName(code);
        const codeName = responseCodeName == null ? "UNKNOWN" : responseCodeName;
        super(`Hedera returned response code: ${codeName} (${code})`);
        this.name = "HederaError";
        this.code = code;
        this.codeName = codeName;
    }
}
exports.HederaError = HederaError;
function isCodeExceptional(code, unknownIsExceptional) {
    switch (code) {
        case ResponseCode_pb_1.ResponseCodeEnum.SUCCESS:
        case ResponseCode_pb_1.ResponseCodeEnum.OK:
            return false;
        case ResponseCode_pb_1.ResponseCodeEnum.UNKNOWN:
        case ResponseCode_pb_1.ResponseCodeEnum.RECEIPT_NOT_FOUND:
        case ResponseCode_pb_1.ResponseCodeEnum.RECORD_NOT_FOUND:
            return unknownIsExceptional;
        default:
            return true;
    }
}
exports.isCodeExceptional = isCodeExceptional;
function throwIfExceptional(code, unknownIsExceptional = true) {
    if (isCodeExceptional(code, unknownIsExceptional)) {
        throw new HederaError(code);
    }
}
exports.throwIfExceptional = throwIfExceptional;
class ValidationError extends Error {
    constructor(className, errors) {
        super(`${className} failed validation:\n${errors.join("\n")}`);
        this.name = "ValidationError";
    }
}
exports.ValidationError = ValidationError;
class MaxPaymentExceededError extends Error {
    constructor(queryCost, maxQueryCost) {
        super(`query cost of ${queryCost.value()} HBAR exceeds max set on client: ${maxQueryCost.value()} HBAR`);
        this.name = "MaxPaymentExceededError";
        this.queryCost = queryCost;
    }
}
exports.MaxPaymentExceededError = MaxPaymentExceededError;
class TinybarValueError extends Error {
    constructor(message, amount) {
        let bnAmount;
        if (amount instanceof Hbar_1.Hbar) {
            bnAmount = amount.asTinybar();
        }
        else if (amount instanceof bignumber_js_1.default) {
            bnAmount = amount;
        }
        else {
            bnAmount = new bignumber_js_1.default(amount);
        }
        super(`${message}: ${bnAmount.toString()}`);
        this.name = "TinybarValueError";
        this.amount = bnAmount;
    }
}
exports.TinybarValueError = TinybarValueError;
