"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const bignumber_js_1 = require("bignumber.js");
const Hbar_1 = require("./Hbar");
const errors_1 = require("./errors");
const wrappers_pb_1 = require("google-protobuf/google/protobuf/wrappers_pb");
const maxTinybarBignum = new bignumber_js_1.default(2).pow(63).minus(1);
const minTinybarBignum = new bignumber_js_1.default(2).pow(63).negated();
function tinybarRangeCheck(amount, allowNegative) {
    const negativeError = "tinybar amount must not be negative in this context";
    if (amount instanceof bignumber_js_1.default || amount instanceof Hbar_1.Hbar) {
        if (!allowNegative && amount.isNegative()) {
            throw new errors_1.TinybarValueError(negativeError, amount);
        }
        const bnAmount = amount instanceof Hbar_1.Hbar ? amount.asTinybar() : amount;
        if (bnAmount.lt(minTinybarBignum) || bnAmount.gt(maxTinybarBignum)) {
            throw new errors_1.TinybarValueError("tinybar amount out of range", bnAmount);
        }
    }
    else {
        if (!allowNegative && amount < 0) {
            throw new errors_1.TinybarValueError(negativeError, amount);
        }
        if (!Number.isSafeInteger(amount)) {
            throw new errors_1.TinybarValueError("tinybar amount out of safe integer range for `number`", amount);
        }
    }
}
exports.tinybarRangeCheck = tinybarRangeCheck;
function tinybarToString(amount, allowNegative) {
    tinybarRangeCheck(amount, allowNegative);
    if (amount instanceof Hbar_1.Hbar) {
        return String(amount.asTinybar());
    }
    return String(amount);
}
exports.tinybarToString = tinybarToString;
function tinybarToUInt64Value(threshold) {
    const value = new wrappers_pb_1.UInt64Value();
    const tinybar = threshold instanceof Hbar_1.Hbar ?
        threshold.asTinybar() :
        threshold;
    if (tinybar instanceof bignumber_js_1.default) {
        tinybarRangeCheck(tinybar);
        value.setValue(tinybar.toNumber());
    }
    else {
        value.setValue(tinybar);
    }
    return value;
}
exports.tinybarToUInt64Value = tinybarToUInt64Value;
