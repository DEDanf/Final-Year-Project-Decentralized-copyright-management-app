/**
 * Flowtype definitions for errors
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.10.0
 */

import BigNumber from "bignumber.js";
import { Hbar } from "./Hbar";
declare export { ResponseCodeEnum } from "./generated/ResponseCode_pb";
export type ResponseCode = number;
/**
 * Get the name of a response code from its number code.
 */
declare export var getResponseCodeName: (code: number) => string | null;
/**
 * Class of errors for response codes returned from Hedera.
 */
declare export class HederaError mixins Error {
  /**
   * The numerical code
   */
  +code: ResponseCode;

  /**
   * The name of the code from the protobufs, or 'UNKNOWN'
   */
  +codeName: string;
  constructor(code: ResponseCode): this;
}
declare export function isCodeExceptional(
  code: ResponseCode,
  unknownIsExceptional: boolean
): boolean;
declare export function throwIfExceptional(
  code: ResponseCode,
  unknownIsExceptional?: boolean
): void;
declare export class ValidationError mixins Error {
  constructor(className: string, errors: string[]): this;
}
declare export class MaxPaymentExceededError mixins Error {
  +queryCost: Hbar;
  constructor(queryCost: Hbar, maxQueryCost: Hbar): this;
}
declare export class TinybarValueError mixins Error {
  +amount: BigNumber;
  constructor(message: string, amount: number | BigNumber | Hbar): this;
}
