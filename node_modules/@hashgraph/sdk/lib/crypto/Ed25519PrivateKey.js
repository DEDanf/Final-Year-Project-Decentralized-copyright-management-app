"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const nacl = require("tweetnacl");
const crypto = require("crypto");
const Ed25519PublicKey_1 = require("./Ed25519PublicKey");
const util_1 = require("./util");
const Keystore_1 = require("./Keystore");
const BadKeyError_1 = require("../errors/BadKeyError");
class Ed25519PrivateKey {
    constructor({ privateKey, publicKey }) {
        if (privateKey.length !== nacl.sign.secretKeyLength) {
            throw new BadKeyError_1.BadKeyError();
        }
        this._keyData = privateKey;
        this.publicKey = Ed25519PublicKey_1.Ed25519PublicKey.fromBytes(publicKey);
    }
    /**
     * Recover a private key from its raw bytes form.
     *
     * This key will _not_ support child key derivation.
     */
    static fromBytes(bytes) {
        // this check is necessary because Jest breaks the prototype chain of Uint8Array
        // noinspection SuspiciousTypeOfGuard
        const bytesArray = bytes instanceof Uint8Array ? bytes : Uint8Array.from(bytes);
        let keypair;
        switch (bytes.length) {
            case 32:
                // fromSeed takes the private key bytes and calculates the public key
                keypair = nacl.sign.keyPair.fromSeed(bytesArray);
                break;
            case 64:
                // priv + pub key pair
                keypair = nacl.sign.keyPair.fromSecretKey(bytesArray);
                break;
            default:
                throw new BadKeyError_1.BadKeyError();
        }
        const { secretKey: privateKey, publicKey } = keypair;
        return new Ed25519PrivateKey({ privateKey, publicKey });
    }
    /**
     * Recover a key from a hex-encoded string.
     *
     * This key will _not_ support child key derivation.
     */
    static fromString(keyStr) {
        switch (keyStr.length) {
            case 64: // lone private key
            case 128: { // private key + public key
                const newKey = Ed25519PrivateKey.fromBytes(util_1.decodeHex(keyStr));
                newKey._asStringRaw = keyStr;
                return newKey;
            }
            case 96:
                if (keyStr.startsWith(util_1.ed25519PrivKeyPrefix)) {
                    const rawStr = keyStr.slice(32);
                    const newKey = Ed25519PrivateKey.fromBytes(util_1.decodeHex(rawStr));
                    newKey._asStringRaw = rawStr;
                    return newKey;
                }
                break;
            default:
        }
        throw new BadKeyError_1.BadKeyError();
    }
    /**
     * Recover a key from a 24-word mnemonic.
     *
     * There is no corresponding `toMnemonic()` as the mnemonic cannot be recovered from the key.
     *
     * Instead, you must generate a mnemonic and a corresponding key in that order with
     * `generateMnemonic()`.
     *
     * This accepts mnemonics generated by the Android and iOS mobile wallets.
     *
     * This key *will* support deriving child keys with `.derive()`.
     *
     * @param mnemonic the mnemonic, either as a string separated by spaces or as a 24-element array
     * @param passphrase the passphrase to protect the private key with
     *
     * @link generateMnemonic
     */
    static fromMnemonic(mnemonic, passphrase) {
        return __awaiter(this, void 0, void 0, function* () {
            const input = mnemonic.toString();
            const salt = `mnemonic${passphrase}`;
            const seed = yield util_1.pbkdf2(input, salt, 2048, 64, "sha512");
            const hmac = crypto.createHmac("sha512", "ed25519 seed");
            hmac.update(seed);
            const digest = hmac.digest();
            let keyBytes = digest.subarray(0, 32);
            let chainCode = digest.subarray(32);
            for (const index of [44, 3030, 0, 0]) {
                ({ keyBytes, chainCode } = util_1.deriveChildKey(keyBytes, chainCode, index));
            }
            const key = Ed25519PrivateKey.fromBytes(keyBytes);
            key._chainCode = chainCode;
            return key;
        });
    }
    /**
     * Recover a private key from a keystore blob previously created by `.createKeystore()`.
     *
     * This key will _not_ support child key derivation.
     *
     * @param keystore the keystore blob
     * @param passphrase the passphrase used to create the keystore
     * @throws KeyMismatchError if the passphrase is incorrect or the hash fails to validate
     * @link createKeystore
     */
    static fromKeystore(keystore, passphrase) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Ed25519PrivateKey(yield Keystore_1.loadKeystore(keystore, passphrase));
        });
    }
    /**
     * Generate a new, cryptographically random private key.
     *
     * This key will _not_ support child key derivation.
     */
    static generate() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.fromBytes(yield util_1.randomBytes(32));
        });
    }
    /**
     * Derive a new private key at the given wallet index.
     *
     * Only currently supported for keys created with `fromMnemonic()`; other keys will throw
     * an error.
     *
     * You can check if a key supports derivation with `.supportsDerivation`
     */
    derive(index) {
        if (this._chainCode == null) {
            throw new Error("this Ed25519 private key does not support key derivation");
        }
        const { keyBytes, chainCode } = util_1.deriveChildKey(this._keyData.subarray(0, 32), this._chainCode, index);
        const key = Ed25519PrivateKey.fromBytes(keyBytes);
        key._chainCode = chainCode;
        return key;
    }
    /** Check if this private key supports deriving child keys */
    get supportsDerivation() {
        return this._chainCode != null;
    }
    toBytes() {
        // copy the bytes so they can't be modified accidentally
        // only copy the private key portion since that's what we're expecting on the other end
        return this._keyData.slice(0, 32);
    }
    toString(raw = false) {
        if (this._asStringRaw == null) {
            // only encode the private portion of the private key
            this._asStringRaw = util_1.encodeHex(this._keyData.subarray(0, 32));
        }
        return (raw ? "" : util_1.ed25519PrivKeyPrefix) + this._asStringRaw;
    }
    /**
     * Create a keystore blob with a given passphrase.
     *
     * The key can be recovered later with `fromKeystore()`.
     *
     * Note that this will not retain the ancillary data used for deriving child keys,
     * thus `.derive()` on the restored key will throw even if this instance supports derivation.
     *
     * @link fromKeystore
     */
    toKeystore(passphrase) {
        return Keystore_1.createKeystore(this._keyData, passphrase);
    }
}
exports.Ed25519PrivateKey = Ed25519PrivateKey;
