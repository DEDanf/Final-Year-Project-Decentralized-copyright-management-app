"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const js_sha3_1 = require("js-sha3");
const bignumber_js_1 = require("bignumber.js");
var ArgumentType;
(function (ArgumentType) {
    ArgumentType[ArgumentType["uint8"] = 0] = "uint8";
    ArgumentType[ArgumentType["int8"] = 1] = "int8";
    ArgumentType[ArgumentType["uint16"] = 2] = "uint16";
    ArgumentType[ArgumentType["int16"] = 3] = "int16";
    ArgumentType[ArgumentType["uint32"] = 4] = "uint32";
    ArgumentType[ArgumentType["int32"] = 5] = "int32";
    ArgumentType[ArgumentType["uint64"] = 6] = "uint64";
    ArgumentType[ArgumentType["int64"] = 7] = "int64";
    ArgumentType[ArgumentType["uint256"] = 8] = "uint256";
    ArgumentType[ArgumentType["string"] = 9] = "string";
    ArgumentType[ArgumentType["bool"] = 10] = "bool";
    ArgumentType[ArgumentType["bytes"] = 11] = "bytes";
    ArgumentType[ArgumentType["bytesfix"] = 12] = "bytesfix";
    ArgumentType[ArgumentType["address"] = 13] = "address";
    ArgumentType[ArgumentType["func"] = 14] = "func";
})(ArgumentType || (ArgumentType = {}));
function solidityTypeToString(ty, length) {
    let s = "";
    switch (ty.ty) {
        case ArgumentType.uint8:
            s = "uint8";
            break;
        case ArgumentType.int8:
            s = "int8";
            break;
        case ArgumentType.uint16:
            s = "uint16";
            break;
        case ArgumentType.int16:
            s = "int16";
            break;
        case ArgumentType.uint32:
            s = "uint32";
            break;
        case ArgumentType.int32:
            s = "int32";
            break;
        case ArgumentType.uint64:
            s = "uint64";
            break;
        case ArgumentType.int64:
            s = "int64";
            break;
        case ArgumentType.uint256:
            s = "uint256";
            break;
        case ArgumentType.string:
            s = "string";
            break;
        case ArgumentType.bool:
            s = "bool";
            break;
        case ArgumentType.bytes:
            s = "bytes";
            break;
        case ArgumentType.bytesfix:
            s = `bytes${length}`;
            break;
        case ArgumentType.address:
            s = "address";
            break;
        case ArgumentType.func:
            s = "function";
            break;
        default:
            s = "";
            break;
    }
    if (ty.array) {
        s += "[]";
    }
    return s;
}
function stringToSoldityType(ty) {
    const argument = ArgumentType[ty];
    if (argument == null) {
        throw new Error(`Argument Type is unsuppored: ${ty}`);
    }
    const array = ty.endsWith("[]");
    return {
        ty: argument,
        array
    };
}
class FunctionSelector {
    constructor(func) {
        this._needsComma = false;
        this.argumentTypes = [];
        this.argumentList = [];
        if (func) {
            this._func = `${func}(`;
        }
    }
    setFunction(func) {
        if (this._func) {
            throw new Error("Function Name has already been set");
        }
        this._func = func ? `${func}(` : "";
        return this;
    }
    addParamType(ty, length) {
        if (this._needsComma) {
            this._func += ",";
        }
        const argument = typeof ty === "string" ?
            stringToSoldityType(ty) :
            ty;
        this._func += solidityTypeToString(argument, length);
        this.argumentTypes.push(argument);
        this._needsComma = true;
        return this;
    }
    static identifier(func) {
        return new Uint8Array(js_sha3_1.keccak256.arrayBuffer(func).slice(0, 4));
    }
    /**
     * NOT A STABLE API
     */
    _toProto() {
        this._func += ")";
        return FunctionSelector.identifier(this._func);
    }
    toString() {
        return `${this._func})`;
    }
}
exports.FunctionSelector = FunctionSelector;
class CallParams {
    constructor(func) {
        this._currentArgument = 0;
        if (func && typeof func === "string") {
            this._func = new FunctionSelector(func);
        }
        else if (func instanceof FunctionSelector) {
            this._func = func;
        }
        else {
            this._func = new FunctionSelector();
        }
    }
    setFunction(func) {
        this._func.setFunction(func);
        return this;
    }
    _conditionallyAddType(ty, length) {
        if (this._func.argumentTypes.length === this._currentArgument) {
            this._func.addParamType(ty, length);
        }
    }
    static _validateBitWidth(bitwidth) {
        if (bitwidth > 256 || bitwidth % 8 !== 0) {
            throw new Error("bitwidth must be less than or equal to 256 and a multiple of 8");
        }
    }
    addUint(param, bitwidth) {
        CallParams._validateBitWidth(bitwidth);
        this._conditionallyAddType(solidityTypeFromBitwidth(bitwidth, false, false));
        return this._addParam(param, false);
    }
    addInt(param, bitwidth) {
        CallParams._validateBitWidth(bitwidth);
        this._conditionallyAddType(solidityTypeFromBitwidth(bitwidth, true, false));
        return this._addParam(param, false);
    }
    addUintArray(param, bitwidth) {
        CallParams._validateBitWidth(bitwidth);
        this._conditionallyAddType(solidityTypeFromBitwidth(bitwidth, false, true));
        return this._addParam(param, true);
    }
    addIntArray(param, bitwidth) {
        CallParams._validateBitWidth(bitwidth);
        this._conditionallyAddType(solidityTypeFromBitwidth(bitwidth, true, true));
        return this._addParam(param, true);
    }
    addBoolean(param) {
        this._conditionallyAddType({ ty: ArgumentType.bool, array: false });
        return this._addParam(param, false);
    }
    addString(param) {
        this._conditionallyAddType({ ty: ArgumentType.string, array: false });
        return this._addParam(param, true);
    }
    addAddress(param) {
        const par = param instanceof Uint8Array ?
            param :
            Buffer.from(param, "hex");
        if (par.length !== 20) {
            throw new Error("`address` type requires parameter to be exactly 20 bytes");
        }
        this._conditionallyAddType({ ty: ArgumentType.address, array: false });
        return this._addParam(par, false);
    }
    addBytes(param, length) {
        // If a length is supplied then the parameter type would be `byte<M>` where M is equal to length
        // and M is less than or equal to 32
        if (length) {
            if (length !== param.length) {
                throw new Error("length of parameter is not equal to the length passed in");
            }
            else if (length > 32) {
                throw new Error("`bytes<M>` type requires parameter length to be less than or equal to 32 bytes");
            }
            this._conditionallyAddType({ ty: ArgumentType.bytesfix, array: false }, length);
        }
        else {
            this._conditionallyAddType({ ty: ArgumentType.bytes, array: false });
        }
        return this._addParam(param, length == null);
    }
    addFunction(address, func) {
        const addressParam = address instanceof Uint8Array ?
            address :
            Buffer.from(address, "hex");
        const functionSelector = func instanceof FunctionSelector ?
            func._toProto() :
            FunctionSelector.identifier(func);
        if (addressParam.length !== 20) {
            throw new Error("`function` type requires parameter `address` to be exactly 20 bytes");
        }
        this._conditionallyAddType({ ty: ArgumentType.func, array: false });
        const proto = new Uint8Array(24);
        proto.set(addressParam, 0);
        proto.set(functionSelector, 20);
        return this._addParam(proto, false);
    }
    addStringArray(strArray) {
        this._conditionallyAddType({ ty: ArgumentType.string, array: true });
        return this._addParam(strArray, true);
    }
    addByteArray(byteArray) {
        this._conditionallyAddType({ ty: ArgumentType.bytes, array: true });
        return this._addParam(byteArray, true);
    }
    addAddressArray(addresses) {
        // Compiler would not allow the use of `.entries` without this assertion
        if (!Array.isArray(addresses)) {
            throw new TypeError(`expected array, got ${typeof addresses}`);
        }
        const par = [];
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        for (const [_, a] of addresses.entries()) {
            if (a instanceof Uint8Array) {
                if (a.length !== 20) {
                    throw new Error("`address` type requires parameter to be exactly 20 bytes");
                }
                par.push(a);
            }
            else {
                const buf = Buffer.from(a, "hex");
                if (buf.length !== 20) {
                    throw new Error("`address` type requires parameter to be exactly 20 bytes");
                }
                par.push();
            }
        }
        this._conditionallyAddType({ ty: ArgumentType.address, array: true });
        return this._addParam(par, true);
    }
    _addParam(param, dynamic) {
        const value = argumentToBytes(param, this._func.argumentTypes[this._currentArgument]);
        this._func.argumentList.push({ dynamic, value });
        this._currentArgument += 1;
        return this;
    }
    /**
     * NOT A STABLE API
     */
    _toProto() {
        if (this._func.argumentList.length !== this._func.argumentTypes.length) {
            throw new Error("Invalid number of parameters provided");
        }
        const length = this._func.argumentList.length === 0 ?
            0 :
            this._func.argumentList.length * 32 + this._func.argumentList
                .map((arg) => arg.dynamic ? arg.value.length : 0)
                .reduce((sum, value) => sum + value) + 4;
        const func = new Uint8Array(length);
        func.set(this._func._toProto(), 0);
        let offset = 32 * this._func.argumentList.length;
        for (const [i, { dynamic, value }] of this._func.argumentList.entries()) {
            if (dynamic) {
                const view = new DataView(func.buffer, 4 + i * 32 + 28);
                view.setUint32(0, offset);
                func.set(value, view.getUint32(0) + 4);
                offset += value.length;
            }
            else {
                func.set(value, 4 + i * 32);
            }
        }
        return func;
    }
}
exports.CallParams = CallParams;
function argumentToBytes(param, ty) {
    let value = new Uint8Array(32);
    let valueView = new DataView(value.buffer, 0);
    if (ty.array) {
        if (!Array.isArray(param)) {
            throw new TypeError("SolidityType indicates type is array, but parameter is not an array");
        }
        const values = [];
        // Generic over any type of array
        // Destructuring required so the first variable must be assigned
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        for (const [_, p] of param.entries()) {
            values.push(argumentToBytes(p, { ty: ty.ty, array: false }));
        }
        const totalLengthOfValues = values
            .map((a) => a.length)
            .reduce((total, current) => total + current);
        value = new Uint8Array(values.length * 32 + totalLengthOfValues + 32);
        valueView = new DataView(value.buffer, 28);
        valueView.setUint32(0, values.length);
        let offset = 32 * values.length;
        for (const [i, e] of values.entries()) {
            const view = new DataView(value.buffer, (i + 1) * 32 + 28);
            view.setUint32(0, offset);
            value.set(e, view.getUint32(0) + 32);
            offset += e.length;
        }
        return value;
    }
    switch (ty.ty) {
        case ArgumentType.uint8:
            numberToBytes(param, 31, valueView.setUint8.bind(valueView));
            return value;
        case ArgumentType.int8:
            numberToBytes(param, 31, valueView.setInt8.bind(valueView));
            return value;
        case ArgumentType.uint16:
            numberToBytes(param, 30, valueView.setUint16.bind(valueView));
            return value;
        case ArgumentType.int16:
            numberToBytes(param, 30, valueView.setInt16.bind(valueView));
            return value;
        case ArgumentType.uint32:
            numberToBytes(param, 28, valueView.setUint32.bind(valueView));
            return value;
        case ArgumentType.int32:
            numberToBytes(param, 28, valueView.setInt32.bind(valueView));
            return value;
        // int64, uint64, and uint256 both expect the parameter to be an Uint8Array instead of number
        case ArgumentType.uint64:
        case ArgumentType.int64:
            if (param instanceof bignumber_js_1.default) {
                // eslint-disable-next-line no-case-declarations
                const par = param.toString(16);
                if (par.length > 16) {
                    throw new TypeError("uint64/int64 requires BigNumber to be less than or equal to 8 bytes");
                }
                else if (!param.isInteger()) {
                    throw new TypeError("uint64/int64 requires BigNumber to be an integer");
                }
                // eslint-disable-next-line no-case-declarations
                const buf = Buffer.from(par, "hex");
                value.set(buf, 32 - buf.length);
            }
            return value;
        case ArgumentType.uint256:
            value = param;
            return value;
        case ArgumentType.address:
            value.set(param, 20);
            return value;
        case ArgumentType.bool:
            value[31] = param ? 1 : 0;
            return value;
        case ArgumentType.func:
            value.set(param, 0);
            return value;
        case ArgumentType.bytesfix:
            value.set(param, 0);
            return value;
        // Bytes should have not the length already encoded
        // JS String type is encoded as UTF-16 whilst Solidity `string` type is UTF-8 encoded.
        // So if will assume is already correctly updated to being a Uint8Array of UTF-8 string
        case ArgumentType.bytes:
        case ArgumentType.string:
            // If value is of type string, encode it in UTF-8 format and conver it to Uint8Array
            // Required because JS Strings are UTF-16
            // eslint-disable-next-line no-case-declarations
            const par = param instanceof Uint8Array ?
                param :
                Buffer.from(param, "utf8");
            // Resize value to a 32 byte boundary if needed
            if (Math.floor(par.length / 32) >= 0 && Math.floor(par.length % 32) !== 0) {
                value = new Uint8Array((Math.floor(par.length / 32) + 1) * 32 + 32);
            }
            else {
                value = new Uint8Array(64);
            }
            value.set(par, 32);
            valueView = new DataView(value.buffer, 28);
            valueView.setUint32(0, par.length);
            return value;
        default: throw new Error(`Unsupported argument type: ${ty}`);
    }
}
function numberToBytes(param, byteoffset, func) {
    const value = param instanceof bignumber_js_1.default ? param.toNumber() : param;
    func(byteoffset, value);
}
function solidityTypeFromBitwidth(bitwidth, signed, array) {
    let ty;
    switch (bitwidth) {
        case 8:
            ty = { ty: signed ? ArgumentType.int8 : ArgumentType.uint8, array };
            break;
        case 16:
            ty = { ty: signed ? ArgumentType.int16 : ArgumentType.uint16, array };
            break;
        case 32:
            ty = { ty: signed ? ArgumentType.int32 : ArgumentType.uint32, array };
            break;
        case 64:
            ty = { ty: signed ? ArgumentType.int64 : ArgumentType.uint64, array };
            break;
        default: ty = { ty: ArgumentType.uint256, array };
    }
    return ty;
}
